// Ejemplo de vulnerabilidad MEDIA - SQL Injection
// Este archivo demuestra una vulnerabilidad de severidad media

const mysql = require('mysql2');

// VULNERABILIDAD MEDIA: SQL Injection
function getUserById(userId) {
  const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'myapp'
  });

  // Construcción insegura de query SQL
  const query = `SELECT * FROM users WHERE id = ${userId}`;
  
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error en la consulta:', err);
      return;
    }
    console.log('Usuario encontrado:', results);
  });
}

// Otra función con SQL injection
function searchUsers(searchTerm) {
  const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'myapp'
  });

  // Query vulnerable a SQL injection
  const query = `SELECT * FROM users WHERE name LIKE '%${searchTerm}%'`;
  
  return new Promise((resolve, reject) => {
    connection.query(query, (err, results) => {
      if (err) {
        reject(err);
        return;
      }
      resolve(results);
    });
  });
}

// Función que construye query dinámicamente
function getUsersByRole(role) {
  const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'myapp'
  });

  // Construcción dinámica insegura
  let query = 'SELECT * FROM users';
  if (role) {
    query += ` WHERE role = '${role}'`;
  }
  
  return connection.promise().query(query);
}

module.exports = {
  getUserById,
  searchUsers,
  getUsersByRole
};
