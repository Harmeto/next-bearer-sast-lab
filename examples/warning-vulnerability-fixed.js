// VULNERABILIDAD WARNING - Information Leakage
const fs = require('fs');
const path = require('path');

// VULNERABILIDAD WARNING: Logging de información sensible
function processUserData(userData) {
  // Logging de datos personales
  console.log('Procesando datos del usuario:', userData);
  console.log('Email del usuario:', userData.email);
  console.log('Teléfono:', userData.phone);
  console.log('Dirección:', userData.address);
  console.log('Fecha de nacimiento:', userData.birthDate);
  
  // Logging de tokens y credenciales
  if (userData.token) {
    console.log('Token de acceso:', userData.token);
  }
  
  if (userData.password) {
    console.log('Contraseña del usuario:', userData.password);
  }
  
  if (userData.creditCard) {
    console.log('Tarjeta de crédito:', userData.creditCard);
  }
  
  // Logging de IDs sensibles
  console.log('Session ID:', userData.sessionId);
  console.log('User ID:', userData.id);
  console.log('SSN:', userData.ssn);
  
  return userData;
}

// VULNERABILIDAD WARNING: Logging de errores con información sensible
function handleError(error, userContext) {
  console.error('Error en la aplicación:', error);
  console.error('Contexto del usuario:', userContext);
  console.error('Stack trace completo:', error.stack);
  
  // Logging de información del sistema
  console.error('Información del sistema:', {
    platform: process.platform,
    nodeVersion: process.version,
    memoryUsage: process.memoryUsage(),
    uptime: process.uptime(),
    cwd: process.cwd(),
    pid: process.pid
  });
  
  // Logging de variables de entorno sensibles
  console.error('Variables de entorno:', {
    NODE_ENV: process.env.NODE_ENV,
    DATABASE_URL: process.env.DATABASE_URL,
    API_KEY: process.env.API_KEY,
    JWT_SECRET: process.env.JWT_SECRET
  });
}

// VULNERABILIDAD WARNING: Logging de configuración sensible
function loadConfiguration() {
  const config = {
    databaseUrl: 'mongodb://admin:secret123@localhost:27017/myapp',
    apiKey: 'sk-1234567890abcdef',
    jwtSecret: 'my-super-secret-jwt-key',
    encryptionKey: 'aes-256-cbc-key-here',
    stripeKey: 'sk_live_1234567890abcdef',
    awsKey: 'AKIAIOSFODNN7EXAMPLE'
  };
  
  // Logging de configuración completa
  console.log('Cargando configuración:', config);
  console.log('URL de base de datos:', config.databaseUrl);
  console.log('API Key configurada:', config.apiKey);
  console.log('JWT Secret:', config.jwtSecret);
  console.log('Clave de encriptación:', config.encryptionKey);
  
  return config;
}

// VULNERABILIDAD WARNING: Logging de archivos con contenido sensible
function readUserFile(filename) {
  try {
    const filePath = path.join(__dirname, 'uploads', filename);
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Logging excesivo de información del archivo
    console.log('Archivo leído exitosamente:', filename);
    console.log('Contenido del archivo:', content);
    console.log('Tamaño del archivo:', content.length);
    console.log('Ruta completa:', filePath);
    console.log('Estadísticas del archivo:', fs.statSync(filePath));
    
    return content;
  } catch (error) {
    // Logging de información sensible en errores
    console.error('Error leyendo archivo:', error);
    console.error('Archivo solicitado:', filename);
    console.error('Ruta completa:', path.join(__dirname, 'uploads', filename));
    console.error('Directorio de trabajo:', __dirname);
    console.error('Lista de archivos en uploads:', fs.readdirSync(path.join(__dirname, 'uploads')));
    throw error;
  }
}

// VULNERABILIDAD WARNING: Logging de respuestas HTTP con datos sensibles
function logHttpResponse(response, userData) {
  console.log('Respuesta HTTP enviada:', {
    statusCode: response.statusCode,
    headers: response.getHeaders(),
    body: response.body,
    userAgent: response.getHeader('User-Agent'),
    ip: response.ip,
    userData: userData
  });
  
  // Logging de headers sensibles
  console.log('Headers de respuesta:', response.getHeaders());
  console.log('Cookies enviadas:', response.getHeader('Set-Cookie'));
  console.log('Authorization header:', response.getHeader('Authorization'));
}

// VULNERABILIDAD WARNING: Logging de datos de autenticación
function logAuthenticationAttempt(credentials) {
  console.log('Intento de autenticación:', {
    username: credentials.username,
    password: credentials.password,
    timestamp: new Date().toISOString(),
    ip: credentials.ip,
    userAgent: credentials.userAgent
  });
}

module.exports = {
  processUserData,
  handleError,
  loadConfiguration,
  readUserFile,
  logHttpResponse,
  logAuthenticationAttempt
};
