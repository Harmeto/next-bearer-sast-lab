// VULNERABILIDAD ALTA - Hardcoded Secrets
const crypto = require('crypto');

// VULNERABILIDAD ALTA: Contrase침as hardcodeadas
const DATABASE_PASSWORD = "admin123456";
const API_SECRET_KEY = "sk_live_1234567890abcdef";
const JWT_SECRET = "my-super-secret-jwt-key-2024";

// VULNERABILIDAD ALTA: API Keys en variables
const STRIPE_SECRET_KEY = "sk_live_51H1234567890abcdef";
const AWS_ACCESS_KEY_ID = "AKIAIOSFODNN7EXAMPLE";
const AWS_SECRET_ACCESS_KEY = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY";

// VULNERABILIDAD ALTA: Tokens de acceso
const GITHUB_TOKEN = "ghp_1234567890abcdef";
const SLACK_BOT_TOKEN = "xoxb-1234567890-abcdef";
const DISCORD_TOKEN = "MTIzNDU2Nzg5MDEyMzQ1Njc4.GhIjKl.MnOpQrStUvWxYzAbCdEfGhIjKlMnOpQrStUvWx";

// VULNERABILIDAD ALTA: Secretos en objetos
const CONFIG = {
  database: {
    host: "localhost",
    port: 5432,
    username: "admin",
    password: "super-secret-password-123",
    url: "postgresql://admin:super-secret-password-123@localhost:5432/myapp"
  },
  api: {
    key: "api-key-1234567890abcdef",
    secret: "api-secret-abcdef1234567890",
    token: "bearer-token-1234567890abcdef"
  },
  encryption: {
    key: "aes-256-cbc-key-here-12345",
    iv: "initialization-vector-123",
    algorithm: "aes-256-cbc"
  }
};

// VULNERABILIDAD ALTA: Funci칩n que usa secretos hardcodeados
function connectToDatabase() {
  const connectionString = `postgresql://${CONFIG.database.username}:${CONFIG.database.password}@${CONFIG.database.host}:${CONFIG.database.port}/myapp`;
  console.log('Connecting to database...');
  return connectionString;
}

// VULNERABILIDAD ALTA: Autenticaci칩n con secretos hardcodeados
function authenticateUser(token) {
  if (token === API_SECRET_KEY) {
    return { authenticated: true, user: 'admin' };
  }
  return { authenticated: false };
}

// VULNERABILIDAD ALTA: JWT con secret hardcodeado
function generateJWT(payload) {
  const jwt = require('jsonwebtoken');
  return jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });
}

// VULNERABILIDAD ALTA: Encriptaci칩n con clave hardcodeada
function encryptData(data) {
  const cipher = crypto.createCipher('aes-256-cbc', CONFIG.encryption.key);
  let encrypted = cipher.update(data, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

module.exports = {
  CONFIG,
  connectToDatabase,
  authenticateUser,
  generateJWT,
  encryptData
};
